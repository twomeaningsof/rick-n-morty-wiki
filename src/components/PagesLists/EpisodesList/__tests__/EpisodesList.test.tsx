import "@testing-library/jest-dom";
import { render, screen } from "@testing-library/react";
import EpisodesList from "..";

const episodesListData = {
  info: {
    __typename: "Info",
    pages: null,
    next: null,
  },
  results: [
    {
      air_date: "December 2, 2013",
      episode: "S01E01",
      id: "1",
      name: "Pilot",
      __typename: "Episode",
    },
    {
      air_date: "December 9, 2013",
      episode: "S01E02",
      id: "2",
      name: "Lawnmower Dog",
      __typename: "Episode",
    },
    {
      air_date: "December 16, 2013",
      episode: "S01E03",
      id: "3",
      name: "Anatomy Park",
      __typename: "Episode",
    },
  ],
  __typename: "Episodes",
};

const emptyEpisodesListData = {
  info: {
    __typename: "Info",
    pages: null,
    next: null,
  },
  results: [],
  __typename: "Episodes",
};

describe("EpisodesList", () => {
  it("renders with episodes", async () => {
    const loading = false;
    const error = undefined;

    /*@ts-expect-error: types generated by graphql-codegen cause unresolvable ts compiler errors*/
    render(<EpisodesList episodesListData={episodesListData} loading={loading} error={error} />);

    expect(await screen.getByText("Pilot")).toBeInTheDocument();
    expect(await screen.getByText("Lawnmower Dog")).toBeInTheDocument();
    expect(await screen.getByText("Anatomy Park")).toBeInTheDocument();
    expect(await screen.getByText("Yay! You have seen it all.")).toBeInTheDocument();
  });

  it("renders loading state", async () => {
    const loading = true;
    const error = undefined;

    /*@ts-expect-error: types generated by graphql-codegen cause unresolvable ts compiler errors*/
    render(<EpisodesList episodesListData={episodesListData} loading={loading} error={error} />);

    expect(await screen.getByText("Loading")).toBeInTheDocument();
  });

  it("renders error state", async () => {
    const loading = false;
    const error = { message: "test" };

    /*@ts-expect-error: types generated by graphql-codegen cause unresolvable ts compiler errors*/
    render(<EpisodesList episodesListData={null} loading={loading} error={error} />);

    expect(await screen.getByText("Error: test")).toBeInTheDocument();
  });

  it("renders empty list with adequate state text", async () => {
    const loading = false;
    const error = undefined;

    /*@ts-expect-error: types generated by graphql-codegen cause unresolvable ts compiler errors*/
    render(<EpisodesList episodesListData={emptyEpisodesListData} loading={loading} error={error} />);

    expect(await screen.getByText("Sorry, there is no match.")).toBeInTheDocument();
  });
});

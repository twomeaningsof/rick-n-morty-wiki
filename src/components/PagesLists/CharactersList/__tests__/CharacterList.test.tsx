import "@testing-library/jest-dom";
import { render, screen } from "@testing-library/react";
import CharactersList from "..";

const characterListData = {
  info: {
    __typename: "Info",
    pages: null,
    next: null,
  },
  results: [
    {
      __typename: "Character",
      id: "1",
      image: "https://rickandmortyapi.com/api/character/avatar/1.jpeg",
      name: "Rick Sanchez",
      status: "Alive",
    },
    {
      __typename: "Character",
      id: "2",
      image: "https://rickandmortyapi.com/api/character/avatar/2.jpeg",
      name: "Morty Smith",
      status: "Alive",
    },
    {
      __typename: "Character",
      id: "11",
      image: "https://rickandmortyapi.com/api/character/avatar/11.jpeg",
      name: "Albert Einstein",
      status: "Dead",
    },
  ],
  __typename: "Characters",
};

const emptyCharacterListData = {
  info: {
    __typename: "Info",
    pages: null,
    next: null,
  },
  results: [],
  __typename: "Characters",
};

describe("CharactersList", () => {
  it("renders with characters", async () => {
    const loading = false;
    const error = undefined;

    /*@ts-expect-error: types generated by graphql-codegen cause unresolvable ts compiler errors*/
    render(<CharactersList charactersListData={characterListData} loading={loading} error={error} />);

    expect(await screen.getByText("Rick Sanchez")).toBeInTheDocument();
    expect(await screen.getByText("Morty Smith")).toBeInTheDocument();
    expect(await screen.getByText("Albert Einstein")).toBeInTheDocument();
    expect(await screen.getByText("Yay! You have seen it all.")).toBeInTheDocument();
  });

  it("renders loading state", async () => {
    const loading = true;
    const error = undefined;

    /*@ts-expect-error: types generated by graphql-codegen cause unresolvable ts compiler errors*/
    render(<CharactersList charactersListData={characterListData} loading={loading} error={error} />);

    expect(await screen.getByText("Loading")).toBeInTheDocument();
  });

  it("renders error state", async () => {
    const loading = false;
    const error = { message: "test" };

    /*@ts-expect-error: types generated by graphql-codegen cause unresolvable ts compiler errors*/
    render(<CharactersList charactersListData={null} loading={loading} error={error} />);

    expect(await screen.getByText("Error: test")).toBeInTheDocument();
  });

  it("renders empty list with adequate state text", async () => {
    const loading = false;
    const error = undefined;

    /*@ts-expect-error: types generated by graphql-codegen cause unresolvable ts compiler errors*/
    render(<CharactersList charactersListData={emptyCharacterListData} loading={loading} error={error} />);

    expect(await screen.getByText("Sorry, there is no match.")).toBeInTheDocument();
  });
});
